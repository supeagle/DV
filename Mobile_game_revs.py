# -*- coding: utf-8 -*-
"""pg_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wpZzppcLRbNnOqEv5VnzD___0t9bat65
"""

import numpy as np
import pandas as pd
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

df = pd.read_table("classified.csv")
df.head(15)

df = df.drop(0).reset_index(drop=True)

df.columns = ["Date", "Installs", "Revenue", "Game Actions", "Crashes", "D1 Retention", "D7 Retention"]

df = df[~df["Date"].isin(["Variant", "Date"])].reset_index(drop=True)

df.head(14)

df = df[~df["Date"].isin(["Variant", "Date"])].reset_index(drop=True)

df["Installs"] = pd.to_numeric(df["Installs"].str.replace(",", ""), errors="coerce")
df["Revenue"] = pd.to_numeric(df["Revenue"].str.replace(",", ""), errors="coerce")
df["Game Actions"] = pd.to_numeric(df["Game Actions"].str.replace(",", ""), errors="coerce")
df["Crashes"] = pd.to_numeric(df["Crashes"].str.replace(",", ""), errors="coerce")

df["D1 Retention"] = pd.to_numeric(df["D1 Retention"].str.rstrip("%"), errors="coerce") / 100
df["D7 Retention"] = pd.to_numeric(df["D7 Retention"].str.rstrip("%"), errors="coerce") / 100

df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)

mid_point = len(df) // 2
df["Group"] = ["Baseline" if i < mid_point else "Variant" for i in range(len(df))]

df_baseline = df[df["Group"] == "Baseline"].reset_index(drop=True)
df_variant = df[df["Group"] == "Variant"].reset_index(drop=True)

# Triple Double Check
df.head(14)

df_baseline.head(7)

df_variant.head(7)

df_baseline.reset_index(inplace=True)
df_variant.reset_index(inplace=True)

df_combined = pd.concat([df_baseline, df_variant])

# Time Series Analyses

plt.figure(figsize=(14, 7))
sns.lineplot(data=df_combined, x="Date", y="Installs", hue="Group", marker="o")
plt.title("Installs Over Time")
plt.xlabel("Date")
plt.ylabel("Installs")
plt.xticks(rotation=45,fontsize=16)
plt.tight_layout()
plt.show()

plt.figure(figsize=(14,7))
sns.barplot(data=df_combined,x="Revenue",y="Date",hue="Group")
plt.title("Revenue Over Time")
plt.xlabel("Revenue",fontsize=16)
plt.ylabel("Date",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Date",y="Game Actions",hue="Group")
plt.title("Game Actions Over Time")
plt.xlabel("Date",fontsize=16)
plt.ylabel("Game Actions",fontsize=16)
plt.xticks(fontsize=16,rotation=45)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Date",y="D1 Retention",hue="Group")
plt.title("D1 Retention Over Time")
plt.xlabel("Date",fontsize=16)
plt.ylabel("D1 Retention Rate",fontsize=16)
plt.xticks(fontsize=16,rotation=45)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Date",y="D7 Retention",hue="Group")
plt.title("D7 Retention Over Time")
plt.xlabel("Date",fontsize=16)
plt.ylabel("D7 Retention Rate",fontsize=16)
plt.xticks(fontsize=16,rotation=45)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

# Lets Check Parameters Synchronized Actions
plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Installs",y="Revenue",hue="Group")
plt.title("Revenue Over Installs")
plt.xlabel("Installs",fontsize=16)
plt.ylabel("Revenue",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Game Actions",y="Revenue",hue="Group")
plt.title("Revenue Over Game Actions")
plt.xlabel("Game Actions",fontsize=16)
plt.ylabel("Revenue",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="Crashes",y="Revenue",hue="Group")
plt.title("Revenue Over Crashes")
plt.xlabel("Crashes",fontsize=16)
plt.ylabel("Revenue",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="D1 Retention",y="Revenue",hue="Group")
plt.title("Revenue Over D1 Retention Rate")
plt.xlabel("D1 Retention Rate",fontsize=16)
plt.ylabel("Revenue",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

plt.figure(figsize=(14,7))
sns.lineplot(data=df_combined,x="D7 Retention",y="Revenue",hue="Group")
plt.title("Revenue Over D7 Retention Rate")
plt.xlabel("D7 Retention Rate",fontsize=16)
plt.ylabel("Revenue",fontsize=16)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.tight_layout()
plt.grid()
plt.show()

# T-Test For Revenue
t_stat, p_value = stats.ttest_ind(df_baseline['Revenue'], df_variant['Revenue'], nan_policy='omit')
print(f"For Revenue T-Test: T-Statistics = {t_stat}, p = {p_value}")

# -T-Test for Game Actions
t_stat, p_value = stats.ttest_ind(df_baseline['Game Actions'], df_variant['Game Actions'], nan_policy='omit')
print(f"For Game Actions T-Test: T-Statistics = {t_stat}, p = {p_value}")

# T-Test for D1 Retention
t_stat, p_value = stats.ttest_ind(df_baseline['D1 Retention'], df_variant['D1 Retention'], nan_policy='omit')
print(f"For D1 Retention T-Test: T-Statistics = {t_stat}, p = {p_value}")
# T-Test For D7 Retention
t_stat, p_value = stats.ttest_ind(df_baseline['D7 Retention'], df_variant['D7 Retention'], nan_policy='omit')
print(f"For D7 Retention T-Test: T-Statistics = {t_stat}, p = {p_value}")

# Basic Statistic Analyses
df.describe()

df_baseline.describe()

df_variant.describe()

# Correlation Matrix
df_baseline_corr = df_baseline[["Revenue","Installs", "Game Actions", "Crashes","D1 Retention", "D7 Retention"]]
df_variant_corr = df_variant[["Revenue","Installs", "Game Actions", "Crashes","D1 Retention", "D7 Retention"]]
corr_matrix_base = df_baseline_corr.corr()
corr_matrix_variant = df_variant_corr.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(data=corr_matrix_variant, annot=True,  cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix of Variant ")
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(data=corr_matrix_base, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix of Baseline")
plt.show()



