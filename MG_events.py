# -*- coding: utf-8 -*-
"""pg_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qrTFmsaMgGYTqJPx6v8rK2AOXxLCiH_m
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import seaborn as sns

df= pd.read_csv("classified.csv")
# Really not really just pretend

# Just Basic Looking
df.head()

df.describe().T

win_fail_df = df[(df["EVENT_NAME"] == "ChapterProgress") & (df["RESULT"].notna()) & (df["GAME_MODE"].notna())].copy()

win_fail_df["EVENT_DATE"] = pd.to_datetime(win_fail_df["EVENT_DATE"])

win_fail_summary = win_fail_df.groupby(["EVENT_DATE", "GAME_MODE"]).agg(
    total_wins=("RESULT", lambda x: (x == 1).sum()),
    total_fails=("RESULT", lambda x: (x == 0).sum()),
    total_games=("RESULT", "count")
).reset_index()

win_fail_summary["win_rate"] = (win_fail_summary["total_wins"] / win_fail_summary["total_games"]) * 100
win_fail_summary["fail_rate"] = (win_fail_summary["total_fails"] / win_fail_summary["total_games"]) * 100

for game_mode in win_fail_summary["GAME_MODE"].unique():
    subset = win_fail_summary[win_fail_summary["GAME_MODE"] == game_mode]
    plt.figure(figsize=(10, 6))
    plt.plot(subset["EVENT_DATE"], subset["win_rate"], label="Win Rate", marker="o")
    plt.plot(subset["EVENT_DATE"], subset["fail_rate"], label="Fail Rate", marker="x")
    plt.title(f"Win and Fail Rates for {game_mode}")
    plt.xlabel("Date")
    plt.ylabel("Rate (%)")
    plt.legend()
    plt.grid(True)
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d"))
    plt.gcf().autofmt_xdate()
    plt.show()

currency_df = df[(df["EVENT_NAME"] == "CurrencyEarned") | (df["EVENT_NAME"] == "CurrencySpent")]

gem_earned_df = currency_df[currency_df["EVENT_NAME"] == "CurrencyEarned"]
gem_spent_df = currency_df[currency_df["EVENT_NAME"] == "CurrencySpent"]

gem_earned_summary = gem_earned_df.groupby("SOURCE").agg(
    total_earned=("AMOUNT", "sum")
).reset_index()
gem_earned_summary["percentage_earned"] = (gem_earned_summary["total_earned"] / gem_earned_summary["total_earned"].sum()) * 100

gem_spent_summary = gem_spent_df.groupby("REASON").agg(
    total_spent=("AMOUNT", "sum")
).reset_index()
gem_spent_summary["percentage_spent"] = (gem_spent_summary["total_spent"] / gem_spent_summary["total_spent"].sum()) * 100

gem_earned_summary["Type"] = "Earning"
gem_spent_summary["Type"] = "Spending"

gem_earned_summary = gem_earned_summary.rename(columns={"SOURCE": "Category", "total_earned": "Amount", "percentage_earned": "Percentage"})
gem_spent_summary = gem_spent_summary.rename(columns={"REASON": "Category", "total_spent": "Amount", "percentage_spent": "Percentage"})

plt.figure(figsize=(14, 8))
sns.barplot(data=gem_earned_summary, x="Percentage", y="Category", palette="viridis")
plt.title("Gem Earnings Distribution by Source")
plt.xlabel("Percentage (%)")
plt.ylabel("Earning Source")
plt.show()

plt.figure(figsize=(14, 8))
sns.barplot(data=gem_spent_summary, x="Percentage", y="Category", palette="magma")
plt.title("Gem Spending Distribution by Reason")
plt.xlabel("Percentage (%)")
plt.ylabel("Spending Reason")
plt.show()

