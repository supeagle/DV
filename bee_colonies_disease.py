# -*- coding: utf-8 -*-
"""Bee Colonies Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QjqY3LMvcnHuPanejP1Bnc8WohseAy9h
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px
import geopandas as gpd
import plotly.graph_objs as go
from mpl_toolkits.axes_grid1 import make_axes_locatable

url = "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv"
data = pd.read_csv(url)
data.head()
data.info()

del data['colony_n']

data = data.rename(columns={'colony_max': 'colony_number'})

data.info()

data.tail(10)

# Summer And Winter Seasons Definition
def season(months):
    if months in ['April-June', 'July-September']:
        return 'Summer'
    else:
        return 'Winter'

data['season'] = data['months'].apply(season)

print(data.tail())
print(data.head())

seasonal_loss = data.groupby(['year', 'season'])['colony_lost'].sum().reset_index()

# Total Loss Group By
total_loss = seasonal_loss.groupby('year')['colony_lost'].sum().reset_index()
total_loss['season'] = 'Total'
seasonal_loss = pd.concat([seasonal_loss, total_loss], ignore_index=True)


plt.figure(figsize=(12, 8))
sns.barplot(data=seasonal_loss, x='year', y='colony_lost', hue='season', palette="plasma")
plt.title('Summer & Winter and Annual Total Bee Colonies Losses (Million)')
plt.xlabel('Year')
plt.ylabel('Colonie Losses (Million)')
plt.grid(True)
plt.show()

annual_add_reno = data.groupby(['year', 'season'])[['colony_added', 'colony_reno']].sum().reset_index()

print(annual_add_reno.head())
print(annual_add_reno.tail())

plt.figure(figsize=(12, 8))

# Colony Added bar chart
plt.subplot(2, 1, 1)
sns.barplot(data=annual_add_reno, x='year', y='colony_added', hue='season')
plt.title('Annual Total Bee Colonies Addings (Summer & Winter)')
plt.xlabel('Year')
plt.ylabel('Total Bee Colonies Addings (Million)')

# Colony Renovated bar chart
plt.subplot(2, 1, 2)
sns.barplot(data=annual_add_reno, x='year', y='colony_reno', hue='season')
plt.title('Annual Total Bee Colonies Renovations (Summer & Winter) ')
plt.xlabel('Year')
plt.ylabel('Total Bee Colonies Renovations (Million)')

plt.tight_layout()
plt.show()

print(data['state'].unique())

data = data[~data['state'].isin(['United States', 'Other States', 'AK'])]

data['colony_lost_pct'] = data['colony_lost_pct'].fillna(0)

state_avg_loss_pct = data.groupby('state')['colony_lost_pct'].mean().sort_values()

all_states = {
    'Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida',
    'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine',
    'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska',
    'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio',
    'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas',
    'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'
}
missing_states = all_states - set(state_avg_loss_pct.index)
for state in missing_states:
    state_avg_loss_pct[state] = 0

url = 'https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json'
states = gpd.read_file(url)

# State Dual Codes
state_abbreviations = {
    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',
    'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',
    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA',
    'Maine': 'ME', 'Maryland': 'MD', 'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',
    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',
    'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',
    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD',
    'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA',
    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'
}
states['abbr'] = states['name'].map(state_abbreviations)

state_avg_loss_pct_df = state_avg_loss_pct.reset_index()
state_avg_loss_pct_df.columns = ['state', 'avg_colony_lost_pct']
merged = states.merge(state_avg_loss_pct_df, left_on='name', right_on='state')

merged = merged.to_crs(epsg=2163)

alaska = merged[merged['abbr'] == 'AK']
hawaii = merged[merged['abbr'] == 'HI']

alaska = alaska.copy()
hawaii = hawaii.copy()
alaska['geometry'] = alaska.translate(xoff=-600000, yoff=-5000000).geometry
hawaii['geometry'] = hawaii.translate(xoff=5700000, yoff=-2000000).geometry

merged = merged[(merged['abbr'] != 'AK') & (merged['abbr'] != 'HI')]

fig, ax = plt.subplots(1, 1, figsize=(15, 10))
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.1)

fig.patch.set_facecolor('lightgrey')
ax.set_facecolor('lightgrey')

merged.plot(column='avg_colony_lost_pct', ax=ax, legend=True, cax=cax,
            legend_kwds={'label': "Average Bee Colonies Losses",
                         'orientation': "vertical"},
            cmap='OrRd', vmin=0, vmax=20)

alaska.plot(column='avg_colony_lost_pct', ax=ax, legend=False, cmap='OrRd', vmin=0, vmax=18)
hawaii.plot(column='avg_colony_lost_pct', ax=ax, legend=False, cmap='OrRd', vmin=0, vmax=18)

for x, y, label in zip(merged.geometry.centroid.x, merged.geometry.centroid.y, merged['abbr']):
    ax.text(x, y, label, fontsize=8, ha='center')
for x, y, label in zip(alaska.geometry.centroid.x, alaska.geometry.centroid.y, alaska['abbr']):
    ax.text(x, y, label, fontsize=8, ha='center')
for x, y, label in zip(hawaii.geometry.centroid.x, hawaii.geometry.centroid.y, hawaii['abbr']):
    ax.text(x, y, label, fontsize=8, ha='center')

plt.suptitle('Between 2015 and 2021 Bee Colonies Losses Rate Average via States ', y=0.95)

ax.axis('off')
plt.show()

alaska['geometry'] = alaska.translate(xoff=-600000, yoff=-5000000).geometry
hawaii['geometry'] = hawaii.translate(xoff=5700000, yoff=-2000000).geometry

state_avg_loss_pct

state_avg_loss_pct.max()

url_2="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv"
data_2=pd.read_csv(url_2)
data_2.head()

data_2.info()

data_2['stress_pct'] = data_2['stress_pct'].fillna(0)
data_2 = data_2[~data_2['state'].isin(['United States', 'Other States'])]


annual_stress = data_2.groupby(['year','state','stressor'])['stress_pct'].mean().reset_index()
print(annual_stress.head(10))

fig = px.scatter(
    data_frame=annual_stress,
    x='stress_pct',
    y='state',
    size='stress_pct',
    color='stressor',
    symbol='stressor',
    range_x=[0, max(annual_stress['stress_pct']) + 5],
    labels={'stress_pct': 'Stress Rate  (%)', 'stressor': 'Stressor', 'year': 'Year', 'state': 'State'},
    title='Annual Damage Rate Caused By Stressor',
    animation_frame='year',
    hover_name='stressor',
    height=800,
    size_max=50,
    color_discrete_sequence=px.colors.qualitative.Plotly
)

fig.update_layout(
    showlegend=True,
    xaxis_title='Stress Percent Rate Average (%)',
    yaxis_title='State',
    legend_title='Stressor',
    template='plotly_dark'
)


fig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 3000
fig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 2000

fig.show()