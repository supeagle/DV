# -*- coding: utf-8 -*-
"""pg_reg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pf8amnQKdkebPIUWPVwoWtJ8kHnz_tFA
"""

import numpy as np
import pandas as pd
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import statsmodels.api as sm

df = pd.read_table("classified_junk_reg.tsv")
df.head(15)
# Real junk company's real junk tsv no doubt

df = df.drop(0).reset_index(drop=True)

df.columns = ["Date", "Installs", "Revenue", "Game Actions", "Crashes", "D1 Retention", "D7 Retention"]

df = df[~df["Date"].isin(["Variant", "Date"])].reset_index(drop=True)

df.head(14)

df = df[~df["Date"].isin(["Variant", "Date"])].reset_index(drop=True)

df["Installs"] = pd.to_numeric(df["Installs"].str.replace(",", ""), errors="coerce")
df["Revenue"] = pd.to_numeric(df["Revenue"].str.replace(",", ""), errors="coerce")
df["Game Actions"] = pd.to_numeric(df["Game Actions"].str.replace(",", ""), errors="coerce")
df["Crashes"] = pd.to_numeric(df["Crashes"].str.replace(",", ""), errors="coerce")

df["D1 Retention"] = pd.to_numeric(df["D1 Retention"].str.rstrip("%"), errors="coerce") / 100
df["D7 Retention"] = pd.to_numeric(df["D7 Retention"].str.rstrip("%"), errors="coerce") / 100

df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)

mid_point = len(df) // 2
df["Group"] = ["Baseline" if i < mid_point else "Variant" for i in range(len(df))]

df_baseline = df[df["Group"] == "Baseline"].reset_index(drop=True)
df_variant = df[df["Group"] == "Variant"].reset_index(drop=True)

# Triple Double Check
df.head(14)

df_baseline.head(7)

df_variant.head(7)

#df_baseline.reset_index(inplace=True)
#df_variant.reset_index(inplace=True)

#df_combined = pd.concat([df_baseline, df_variant])

df_baseline.set_index("Date", inplace=True)
df_variant.set_index("Date", inplace=True)

y_baseline = df_baseline["Revenue"]
X_baseline = df_baseline[["Installs", "Game Actions", "D1 Retention", "D7 Retention"]]

y_variant = df_variant["Revenue"]
X_variant = df_variant[["Installs", "Game Actions", "D1 Retention", "D7 Retention"]]

X_baseline = sm.add_constant(X_baseline)
X_variant = sm.add_constant(X_variant)

model_baseline = sm.OLS(y_baseline, X_baseline).fit()
model_variant = sm.OLS(y_variant, X_variant).fit()

print("Baseline Group Model Summary:")
print(model_baseline.summary())

print("Variant Group Model Summary:")
print(model_variant.summary())

df_baseline["Predicted Revenue"] = model_baseline.predict(X_baseline)
df_variant["Predicted Revenue"] = model_variant.predict(X_variant)

plt.figure(figsize=(14, 6))
plt.plot(df_baseline.index, df_baseline["Revenue"], label="Actual Revenue (Baseline)", color="blue")
plt.plot(df_baseline.index, df_baseline["Predicted Revenue"], label="Predicted Revenue (Baseline)", linestyle="dashed", color="cyan")

plt.plot(df_variant.index, df_variant["Revenue"], label="Actual Revenue (Variant)", color="red")
plt.plot(df_variant.index, df_variant["Predicted Revenue"], label="Predicted Revenue (Variant)", linestyle="dashed", color="orange")

plt.xlabel("Date", fontsize=12)
plt.ylabel("Revenue", fontsize=12)
plt.title("Actual vs Predicted Revenue Over Time: Baseline vs Variant", fontsize=14)
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

